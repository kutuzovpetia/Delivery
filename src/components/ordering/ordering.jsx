import React from "react";
import { Component } from "react";
import s from "./style.module.scss";
import Button from "react-bootstrap/Button";
import Alert from "react-bootstrap/Alert";
import { connect } from "react-redux";
import Modal from 'react-bootstrap/Modal';

const botToken = "1596428981:AAG5zWC68zFnxFXiCe1veYKrFks8vdQ7QEI";
const chatId = "-1001471493860";

class Ordering extends Component {
  constructor(props) {
    super(props);

    this.state = {
      name: "",
      phone: "",
      street: "",
      home: "",
      apart: "",
      cashType: false,
      peopleCount: '',
      zdacha: '',
      eco: false,
      comments: '',
      error: false,
    };

    this.reset = this.reset.bind(this);
    this.onNameChange = this.onNameChange.bind(this);
    this.onPhoneChange = this.onPhoneChange.bind(this);
    this.onStreetChange = this.onStreetChange.bind(this);
    this.onHomeChange = this.onHomeChange.bind(this);
    this.onApartChange = this.onApartChange.bind(this);
    this.checkedChange = this.checkedChange.bind(this);
    this.sendMsg = this.sendMsg.bind(this);
  }

  reset() {
    this.setState({ name: "", phone: "", street: "", home: "", apart: "", comments: "", peopleCount: "", zdacha: ""});
  }

  onNameChange(e) {
    const val = e.target.value;
    val.length > 20
      ? this.setState({ name: val.slice(0, val.length - 1) })
      : this.setState({ name: val });
  }

  onPhoneChange(e) {
    const val = e.target.value;
    if (Number.isInteger(+val) && val.length <= 10) {
      console.log(val);
      this.setState({ phone: val });
    }
  }

  onStreetChange(e) {
    const val = e.target.value;
    val.length > 20
      ? this.setState({ street: val.slice(0, val.length - 1) })
      : this.setState({ street: val });
  }

  onHomeChange(e) {
    const val = e.target.value;
    val.length > 20
      ? this.setState({ home: val.slice(0, val.length - 1) })
      : this.setState({ home: val });
  }

  onApartChange(e) {
    const val = e.target.value;
    val.length > 20
      ? this.setState({ apart: val.slice(0, val.length - 1) })
      : this.setState({ apart: val });
  }

  sendMsg() {
    const { name, phone, street, home, apart, cashType, peopleCount, zdacha, eco, comments } = this.state;

    if (!name || !phone || !street || !home || !apart) {

      this.setState({error: true,});
      setTimeout(() => {
        this.setState({
          error: false,
        });
      }, 2000);
      return;
    }


    let menu = '';

    this.props.order.forEach((item,i) => {
      menu += `  ${i+1}) ${item.title} ${item.count} —à—Ç%0A`;
    });

    console.log(this.props.order);
    const message =
  `–ò–º—è: ${name}%0A%0A
  ‚òé –¢–µ–ª–µ—Ñ–æ–Ω: ${phone}%0A%0A
  üåÅ –£–ª–∏—Ü–∞: ${street}%0A%0A
  üè† –î–æ–º: ${home}%0A%0A
  üè¢ –ö–≤–∞—Ä—Ç–∏—Ä–∞: ${apart}%0A%0A
  üí∞ ${!cashType ? '–û–ø–ª–∞—Ç–∞ –Ω–∞–ª–∏—á–Ω—ã–º–∏': '–û–ø–ª–∞—Ç–∞ –∫–∞—Ä—Ç–æ–π'}%0A%0A
  üôé –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —á–µ–ª–æ–≤–µ–∫: ${peopleCount ? peopleCount : '–Ω–µ —É–∫–∞–∑–∞–Ω–æ'}%0A%0A
  üíµ –ù—É–∂–Ω–∞ —Å–¥–∞—á–∞ c ${zdacha ? zdacha : '–Ω–µ —É–∫–∞–∑–∞–Ω–æ'}%0A%0A
  üì¶ –≠–∫–æ-—É–ø–∞–∫–æ–≤–∫–∞: ${eco ? '–Ω—É–∂–Ω–∞' : '–Ω–µ –Ω—É–∂–Ω–∞'}%0A%0A
  üìù –ö–æ–º–µ–Ω—Ç–∞—Ä–∏–π: ${comments ? comments : '–Ω–µ—Ç'}%0A%0A
   –ú–µ–Ω—é:%0A
  ************************************%0A
  ${menu}%0A
  üí∏ –°—É–º–∞: ${this.props.total} –≥—Ä–Ω.
  `;

    fetch(
      `https://api.telegram.org/bot${botToken}/sendMessage?chat_id=${chatId}&parse_mode=html&text=${message}`
    );

    alert('–ó–∞–∫–∞–∑ —É—Å–ø–µ—à–Ω–æ –ø—Ä–∏–Ω—è—Ç!');
    this.reset();
  }

  checkedChange() {
    const { cashType } = this.state;
    this.setState({ cashType: !cashType });
    console.log(cashType);
  }


  render() {
    
    return (
      <form id="telegram" className={`${s.wrapper}`}>
        {
          this.state.error ? <Alert className={s.alert} variant="success">–ù–µ –≤—Å–µ –ø–æ–ª—è –∑–∞–ø–æ–ª–Ω–µ–Ω—ã!</Alert> : null
        }
        
        <h3>–û—Ñ–æ—Ä–º–ª–µ–Ω–∏–µ –∑–∞–∫–∞–∑–∞</h3>
        <button
          className={`${s.reset} btn btn-warning mr-3`}
          type="reset"
          onClick={this.reset}
        >
          –û—á–∏—Å—Ç–∏—Ç—å –ø–æ–ª—è
        </button>
        <div className="d-flex flex-wrap justify-content-between mt-5">
          <div>
            <input
              className={`${s.name} form-control`}
              type="text"
              name="name"
              placeholder="–í–∞—à–µ –∏–º—è"
              value={this.state.name}
              onChange={this.onNameChange}
            />
            <input
              className={`${s.street} form-control`}
              type="text"
              name="street"
              placeholder="–£–ª–∏—Ü–∞"
              value={this.state.street}
              onChange={this.onStreetChange}
            />
          </div>
          <div>
            <input
              className={`${s.phone} form-control`}
              type="text"
              name="phone"
              placeholder="–ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞"
              value={this.state.phone}
              onChange={this.onPhoneChange}
            />
            <div className="d-flex">
              <input
                className={`${s.home} form-control`}
                type="text"
                name="home"
                placeholder="–î–æ–º"
                value={this.state.home}
                onChange={this.onHomeChange}
              />
              <input
                className={`${s.apart} form-control`}
                type="text"
                name="apart"
                placeholder="–ö–≤–∞—Ä—Ç–∏—Ä–∞"
                value={this.state.apart}
                onChange={this.onApartChange}
              />
            </div>
          </div>
        </div>

        <div className="d-flex justify-content-between mt-5 flex-wrap">
          <div>
            <div>
              <input
                id="nal"
                type="radio"
                name="cash"
                defaultChecked
                onChange={this.checkedChange}
              />
              <label className="ml-2" htmlFor="nal">
                –û–ø–ª–∞—Ç–∞ –Ω–∞–ª–∏—á–Ω—ã–º–∏
              </label>
            </div>
            <div>
              <input
                id="card"
                type="radio"
                name="cash"
                onChange={this.checkedChange}
              />
              <label className="ml-2" htmlFor="card">
                –ö–∞—Ä—Ç–æ–π –∫—É—Ä—å–µ—Ä—É
              </label>
            </div>
          </div>

          <div>
            <div className="d-flex">
              <label htmlFor="peopleCount">–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —á–µ–ª–æ–≤–µ–∫</label>
              <input className="form-control" id="peopleCount" type="text" value={this.state.peopleCount} onChange={(e)=>{this.setState({peopleCount: e.target.value})}}/>
            </div>
            <div className="d-flex">
              <label htmlFor="change">–ù—É–∂–Ω–∞ —Å–¥–∞—á–∞ —Å </label>
              <input className="form-control" id="change" type="text" value={this.state.zdacha} onChange={(e)=>{this.setState({zdacha: e.target.value})}}/>
            </div>
          </div>
        </div>

        <div className="d-flex mt-5 justify-content-between mb-5 flex-wrap">
          <div>
            <input id="eco" type="checkbox" value={this.state.eco} onChange={(e)=>{this.setState({eco: !this.state.eco}); console.log(e.target.value)}}/>
            <label className="ml-2 eco" htmlFor="eco">
              –≠–∫–æ-—É–ø–∞–∫–æ–≤–∫–∞
            </label>
          </div>

          <input
            className={`${s.promocode} form-control`}
            type="text"
            placeholder="–ü—Ä–æ–º–æ–∫–æ–¥"
          />
        </div>

        <input
          className="form-control"
          type="text"
          placeholder="–ö–æ–º–µ–Ω—Ç–∞—Ä–∏–∏ –∫ –∑–∞–∫–∞–∑—É"
          value={this.state.comments}
          onChange={(e)=>{this.setState({comments: e.target.value})}}
        />

        <div className="d-flex justify-content-center mt-4 mb-3">
          <Button
            type="button"
            className={s.ok}
            variant="warning"
            onClick={this.sendMsg}
          >
            –°–î–ï–õ–ê–¢–¨ –ó–ê–ö–ê–ó
          </Button>
        </div>
      </form>
    );
  }
}

const mapStateToProps = (state) => {
  return {
    order: state.order,
    total: state.total,
  };
};

export default connect(mapStateToProps)(Ordering);
