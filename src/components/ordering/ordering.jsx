import React from "react";
import { Component } from "react";
import s from "./style.module.scss";
import Button from "react-bootstrap/Button";
import Alert from "react-bootstrap/Alert";
import { connect } from "react-redux";
import * as actions from '../../action/action';
import Modal from "../modal-order";
import Mod from "react-bootstrap/Modal";

const botToken = "1596428981:AAG5zWC68zFnxFXiCe1veYKrFks8vdQ7QEI"; // –¢–æ–∫–µ–Ω –±–æ—Ç–∞
const chatId = "-1001471493860";                                   // Id –≥—Ä—É–ø–æ–≤–æ–≥–æ —á–∞—Ç–∞

class Ordering extends Component {
  constructor(props) {
    super(props);

    this.state = {
      name: "",
      phone: "",
      street: "",
      home: "",
      apart: "",
      cashType: false,
      peopleCount: "",
      zdacha: "",
      eco: false,
      comments: "",
      error: false,    
      discount: false,
    };

    this.reset = this.reset.bind(this);
    this.onNameChange = this.onNameChange.bind(this);
    this.onPhoneChange = this.onPhoneChange.bind(this);
    this.onStreetChange = this.onStreetChange.bind(this);
    this.onHomeChange = this.onHomeChange.bind(this);
    this.onApartChange = this.onApartChange.bind(this);
    this.checkedChange = this.checkedChange.bind(this);
    this.sendMsg = this.sendMsg.bind(this);
  }

  checkInput(){  // –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –ø—É—Å—Ç–æ—Ç—É
    const { name, phone, street, home, apart} = this.state;
    if (!name || !phone || !street || !home || !apart) {
      return true;
    }
    else{
      return false;
    }
  }

  showAlert(){ // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–∫–∞–∑–∞ Alert
    this.setState({ error: true });
      setTimeout(() => {
        this.setState({
          error: false,
        });
      }, 2000);

      return;
  }


  reset() { // –§—É–Ω–∫—Ü–∏—è –æ—á–∏—â–µ–Ω–∏—è –ø–æ–ª–µ–π
    this.setState({ name: "", phone: "", street: "", home: "", apart: "", comments: "", peopleCount: "", zdacha: "",});
  }

  onNameChange(e) { // –ò–º—è –Ω–µ –±–æ–ª—å—à–µ 20-—Ç–∏ —Å–∏–º–≤–æ–ª–æ–≤
    const val = e.target.value;
    val.length > 20
      ? this.setState({ name: val.slice(0, val.length - 1) })
      : this.setState({ name: val });
  }

  onPhoneChange(e) { // –¢–µ–ª–µ—Ñ–æ–Ω –Ω–µ –±–æ–ª—å—à–µ 10-—Ç–∏ —Å–∏–º–≤–æ–ª–æ–≤, —Ç–æ–ª—å–∫–æ —Ü–∏—Ñ—Ä—ã
    const val = e.target.value;
    if (Number.isInteger(+val) && val.length <= 10) {
      this.setState({ phone: val });
    }
  }

  onStreetChange(e) { // –£–ª–∏—Ü–∞ –Ω–µ –±–æ–ª—å—à–µ 20-—Ç–∏ —Å–∏–º–≤–æ–ª–æ–≤
    const val = e.target.value;
    val.length > 20
      ? this.setState({ street: val.slice(0, val.length - 1) })
      : this.setState({ street: val });
  }

  onHomeChange(e) { // –î–æ–º –Ω–µ –±–æ–ª—å—à–µ 20-—Ç–∏ —Å–∏–º–≤–æ–ª–æ–≤
    const val = e.target.value;
    val.length > 20
      ? this.setState({ home: val.slice(0, val.length - 1) })
      : this.setState({ home: val });
  }

  onApartChange(e) { // –ö–≤–∞—Ä—Ç–∏—Ä–∞ –Ω–µ –±–æ–ª—å—à–µ 20-—Ç–∏ —Å–∏–º–≤–æ–ª–æ–≤
    const val = e.target.value;
    val.length > 20
      ? this.setState({ apart: val.slice(0, val.length - 1) })
      : this.setState({ apart: val });
  }

  sendMsg() { // –§—É–Ω–∫—Ü–∏—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –∑–∞–∫–∞–∑–∞ –≤ —Ç–µ–ª–µ–≥—Ä–∞–º
    const { name, phone, street, home, apart, cashType,peopleCount,zdacha,eco,comments, } = this.state;

    let menu = "";

    this.props.order.forEach((item, i) => { // –ó–∞–ø–æ–ª–Ω—è–µ–º –º–µ–Ω—é
      menu += `  ${i + 1}) ${item.title} ${item.count} —à—Ç%0A`;
    });

    const message = `–ò–º—è: ${name}%0A%0A
  ‚òé –¢–µ–ª–µ—Ñ–æ–Ω: ${phone}%0A%0A
  üåÅ –£–ª–∏—Ü–∞: ${street}%0A%0A
  üè† –î–æ–º: ${home}%0A%0A
  üè¢ –ö–≤–∞—Ä—Ç–∏—Ä–∞: ${apart}%0A%0A
  üí∞ ${!cashType ? "–û–ø–ª–∞—Ç–∞ –Ω–∞–ª–∏—á–Ω—ã–º–∏" : "–û–ø–ª–∞—Ç–∞ –∫–∞—Ä—Ç–æ–π"}%0A%0A
  üôé –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —á–µ–ª–æ–≤–µ–∫: ${peopleCount ? peopleCount : "–Ω–µ —É–∫–∞–∑–∞–Ω–æ"}%0A%0A
  üíµ –ù—É–∂–Ω–∞ —Å–¥–∞—á–∞ c ${zdacha ? zdacha : "–Ω–µ —É–∫–∞–∑–∞–Ω–æ"}%0A%0A
  üì¶ –≠–∫–æ-—É–ø–∞–∫–æ–≤–∫–∞: ${eco ? "–Ω—É–∂–Ω–∞" : "–Ω–µ –Ω—É–∂–Ω–∞"}%0A%0A
  üìù –ö–æ–º–µ–Ω—Ç–∞—Ä–∏–π: ${comments ? comments : "–Ω–µ—Ç"}%0A%0A
  üí≤ –°–∫–∏–¥–∫–∞: ${this.state.discount ? "-10%" : "–Ω–µ—Ç"}%0A%0A
   –ú–µ–Ω—é:%0A
  ************************************%0A
  ${menu}%0A
  üí∏ –°—É–º–∞: ${
    this.state.discount
      ? Math.round(this.props.total * (1 - 10 / 100))
      : this.props.total
  } –≥—Ä–Ω.
  `;

    fetch(
      `https://api.telegram.org/bot${botToken}/sendMessage?chat_id=${chatId}&parse_mode=html&text=${message}`
    );

    alert("–ó–∞–∫–∞–∑ —É—Å–ø–µ—à–Ω–æ –ø—Ä–∏–Ω—è—Ç!");
    this.props.showMod();     // –°–∫—Ä—ã–≤–∞—é –º–æ–¥–∞–ª—å–Ω–æ –æ–∫–Ω–æ
    this.reset();             // –û—á–∏—â–∞—é –ø–æ–ª—è
    this.props.clearOrder();  // –û—á–∏—â–∞—é –∫–æ—Ä–∑–∏–Ω—É
    this.props.totalUpdate(0);// –ó–∞–Ω—É–ª—è—é
  }

  checkedChange() { // –§—É–Ω–∫—Ü–∏—è –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏—è –æ–ø–ª–∞—Ç—ã (–∫–∞—Ä—Ç–∞/–Ω–∞–ª–∏—á–∫–∞)

    const { cashType } = this.state;
    this.setState({ cashType: !cashType });

  }

  render() {

    const { name,phone,street,home,apart,cashType,peopleCount,zdacha,eco,comments,discount} = this.state;
    return (
      <form id="telegram" className={`${s.wrapper}`}>
        {this.state.error ? (
          <Alert className={s.alert} variant="success">
            –ù–µ –≤—Å–µ –ø–æ–ª—è –∑–∞–ø–æ–ª–Ω–µ–Ω—ã!
          </Alert>
        ) : null}

        <h3>–û—Ñ–æ—Ä–º–ª–µ–Ω–∏–µ –∑–∞–∫–∞–∑–∞</h3>
        <button
          className={`${s.reset} btn btn-warning mr-3`}
          type="reset"
          onClick={this.reset}
        >
          –û—á–∏—Å—Ç–∏—Ç—å –ø–æ–ª—è
        </button>
        <div className="d-flex flex-wrap justify-content-between mt-5">
          <div>
            <input
              className={`${s.name} form-control`}
              type="text"
              name="name"
              placeholder="–í–∞—à–µ –∏–º—è"
              value={this.state.name}
              onChange={this.onNameChange}
            />
            <input
              className={`${s.street} form-control`}
              type="text"
              name="street"
              placeholder="–£–ª–∏—Ü–∞"
              value={this.state.street}
              onChange={this.onStreetChange}
            />
          </div>
          <div>
            <input
              className={`${s.phone} form-control`}
              type="text"
              name="phone"
              placeholder="–ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞"
              value={this.state.phone}
              onChange={this.onPhoneChange}
            />
            <div className="d-flex">
              <input
                className={`${s.home} form-control`}
                type="text"
                name="home"
                placeholder="–î–æ–º"
                value={this.state.home}
                onChange={this.onHomeChange}
              />
              <input
                className={`${s.apart} form-control`}
                type="text"
                name="apart"
                placeholder="–ö–≤–∞—Ä—Ç–∏—Ä–∞"
                value={this.state.apart}
                onChange={this.onApartChange}
              />
            </div>
          </div>
        </div>

        <div className="d-flex justify-content-between mt-5 flex-wrap">
          <div>
            <div>
              <input
                id="nal"
                type="radio"
                name="cash"
                defaultChecked
                onChange={this.checkedChange}
              />
              <label className="ml-2" htmlFor="nal">
                –û–ø–ª–∞—Ç–∞ –Ω–∞–ª–∏—á–Ω—ã–º–∏
              </label>
            </div>
            <div>
              <input
                id="card"
                type="radio"
                name="cash"
                onChange={this.checkedChange}
              />
              <label className="ml-2" htmlFor="card">
                –ö–∞—Ä—Ç–æ–π –∫—É—Ä—å–µ—Ä—É
              </label>
            </div>
          </div>

          <div>
            <div className="d-flex">
              <label htmlFor="peopleCount">–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —á–µ–ª–æ–≤–µ–∫</label>
              <input
                className="form-control"
                id="peopleCount"
                type="text"
                value={this.state.peopleCount}
                onChange={(e) => {
                  this.setState({ peopleCount: e.target.value });
                }}
              />
            </div>
            <div className="d-flex">
              <label htmlFor="change">–ù—É–∂–Ω–∞ —Å–¥–∞—á–∞ —Å </label>
              <input
                className="form-control"
                id="change"
                type="text"
                value={this.state.zdacha}
                onChange={(e) => {
                  this.setState({ zdacha: e.target.value });
                }}
              />
            </div>
          </div>
        </div>

        <div className="d-flex mt-5 justify-content-between mb-5 flex-wrap">
          <div>
            <input
              id="eco"
              type="checkbox"
              value={this.state.eco}
              onChange={(e) => {
                this.setState({ eco: !this.state.eco });
              }}
            />
            <label className="ml-2 eco" htmlFor="eco">
              –≠–∫–æ-—É–ø–∞–∫–æ–≤–∫–∞
            </label>
          </div>

          <input
            className={`${s.promocode} form-control`}
            type="text"
            placeholder="–ü—Ä–æ–º–æ–∫–æ–¥"
            onChange={(e) => {
              this.props.promocode === e.target.value
                ? this.setState({ discount: true })
                : this.setState({ discount: false });
            }}
          />
        </div>

        <input
          className="form-control"
          type="text"
          placeholder="–ö–æ–º–µ–Ω—Ç–∞—Ä–∏–∏ –∫ –∑–∞–∫–∞–∑—É"
          value={this.state.comments}
          onChange={(e) => {
            this.setState({ comments: e.target.value });
          }}
        />

        <div className="d-flex justify-content-center mt-4 mb-3">
          <Button
            type="button"
            className={s.ok}
            variant="warning"
            onClick={()=>{!this.checkInput() ? this.props.showMod() : this.showAlert()}}
          >
            –°–î–ï–õ–ê–¢–¨ –ó–ê–ö–ê–ó
          </Button>
        </div>

        <Mod show={this.props.show}>  
          <Modal
            name={name}
            phone={phone}
            street={street}
            home={home}
            apart={apart}
            cashType={cashType}
            peopleCount={peopleCount}
            zdacha={zdacha}
            eco={eco}
            comments={comments}
            sendMsg={this.sendMsg}
            discount={discount}
          />
        </Mod>
      </form>
    );
  }
}

const mapStateToProps = (state) => {
  return {
    order: state.order,
    total: state.total,
    promocode: state.promocode,
    show: state.showModal,
  };
};

export default connect(mapStateToProps, actions)(Ordering);
